import React, { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

// Pricing Configuration
const PRICING_CONFIG = {
  baseRate: 10,
  premiumMultiplier: 1.5,
  additionalServices: {
    cleaningService: 150,
    gutterGuards: 500,
    specialRoofTypes: 250
  }
};

const GutterEstimateApp = () => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    email: '',
    address: '',
    homeLength: '',
    gutterType: 'standard',
    additionalServices: []
  });
  const [estimate, setEstimate] = useState(null);
  const [validationErrors, setValidationErrors] = useState({});

  // Basic Form Validation
  const validateForm = () => {
    const errors = {};
    
    if (!formData.name || formData.name.length < 2) {
      errors.name = "Name is required and must be at least 2 characters";
    }
    
    const phoneRegex = /^\d{10}$/;
    if (!formData.phone || !phoneRegex.test(formData.phone)) {
      errors.phone = "Invalid phone number (10 digits required)";
    }
    
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!formData.email || !emailRegex.test(formData.email)) {
      errors.email = "Invalid email address";
    }
    
    if (!formData.address || formData.address.length < 5) {
      errors.address = "Address is required";
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const calculateEstimate = () => {
    if (!validateForm()) return;

    const baseEstimate = PRICING_CONFIG.baseRate * 
      parseFloat(formData.homeLength) * 
      (formData.gutterType === 'premium' ? PRICING_CONFIG.premiumMultiplier : 1);

    const additionalServicesCost = formData.additionalServices.reduce(
      (total, service) => total + PRICING_CONFIG.additionalServices[service], 
      0
    );

    const totalEstimate = baseEstimate + additionalServicesCost;
    
    setEstimate(totalEstimate.toFixed(2));
    setStep(3);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleServiceChange = (service) => {
    setFormData(prev => ({
      ...prev,
      additionalServices: prev.additionalServices.includes(service)
        ? prev.additionalServices.filter(s => s !== service)
        : [...prev.additionalServices, service]
    }));
  };

  const renderStep = () => {
    switch(step) {
      case 1:
        return (
          <Card>
            <CardHeader>
              <CardTitle>Customer Information</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <Input
                    name="name"
                    placeholder="Full Name"
                    value={formData.name}
                    onChange={handleChange}
                    required
                  />
                  {validationErrors.name && (
                    <p className="text-red-500 text-sm">{validationErrors.name}</p>
                  )}
                </div>
                <div>
                  <Input
                    name="phone"
                    placeholder="Phone Number (10 digits)"
                    value={formData.phone}
                    onChange={handleChange}
                    required
                  />
                  {validationErrors.phone && (
                    <p className="text-red-500 text-sm">{validationErrors.phone}</p>
                  )}
                </div>
                <div>
                  <Input
                    name="email"
                    placeholder="Email Address"
                    value={formData.email}
                    onChange={handleChange}
                    type="email"
                    required
                  />
                  {validationErrors.email && (
                    <p className="text-red-500 text-sm">{validationErrors.email}</p>
                  )}
                </div>
                <div>
                  <Input
                    name="address"
                    placeholder="Property Address"
                    value={formData.address}
                    onChange={handleChange}
                    required
                  />
                  {validationErrors.address && (
                    <p className="text-red-500 text-sm">{validationErrors.address}</p>
                  )}
                </div>
                <Button 
                  onClick={() => {
                    if (validateForm()) setStep(2);
                  }}
                >
                  Next: Gutter Details
                </Button>
              </div>
            </CardContent>
          </Card>
        );
      case 2:
        return (
          <Card>
            <CardHeader>
              <CardTitle>Gutter Measurement</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Input
                  name="homeLength"
                  placeholder="Total Home Length (linear feet)"
                  value={formData.homeLength}
                  onChange={handleChange}
                  type="number"
                  required
                />
                <select
                  name="gutterType"
                  value={formData.gutterType}
                  onChange={handleChange}
                  className="w-full p-2 border rounded"
                >
                  <option value="standard">Standard Gutters</option>
                  <option value="premium">Premium Gutters</option>
                </select>
                
                <div className="space-y-2">
                  <h3 className="font-semibold">Additional Services</h3>
                  {Object.keys(PRICING_CONFIG.additionalServices).map(service => (
                    <div key={service} className="flex items-center">
                      <input
                        type="checkbox"
                        id={service}
                        checked={formData.additionalServices.includes(service)}
                        onChange={() => handleServiceChange(service)}
                        className="mr-2"
                      />
                      <label htmlFor={service}>
                        {service.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())} 
                        (+${PRICING_CONFIG.additionalServices[service]})
                      </label>
                    </div>
                  ))}
                </div>

                <div className="flex space-x-4">
                  <Button variant="outline" onClick={() => setStep(1)}>
                    Back
                  </Button>
                  <Button 
                    onClick={calculateEstimate}
                    disabled={!formData.homeLength}
                  >
                    Get Estimate
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        );
      case 3:
        return (
          <Card>
            <CardHeader>
              <CardTitle>Your Estimate</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center space-y-4">
                <p className="text-2xl font-bold">Estimated Cost: ${estimate}</p>
                <p>We'll contact you soon to confirm details!</p>
                <div className="space-y-2">
                  <p><strong>Name:</strong> {formData.name}</p>
                  <p><strong>Phone:</strong> {formData.phone}</p>
                  <p><strong>Email:</strong> {formData.email}</p>
                </div>
                <Button onClick={() => setStep(1)}>
                  Start Over
                </Button>
              </div>
            </CardContent>
          </Card>
        );
      default:
        return null;
    }
  };

  return (
    <div className="max-w-md mx-auto mt-10">
      {renderStep()}
    </div>
  );
};

export default GutterEstimateApp;
